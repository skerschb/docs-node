=================
Update a Document
=================

.. default-domain:: mongodb

You can update a single document using the :node-api:`collection.updateOne()
<Collection.html#updateOne>` method. ``updateOne()`` accepts a filter
document and a replacement document. If the query matches documents in the
collection, it replaces the matches with the replacement document. The
update document requires an
:manual:`Update Operator </reference/operator/update/#update-operators>`
to modify a field in a document.

Create an :mdn:`Object
<Web/JavaScript/Reference/Global_Objects/Object>` to specify additional
options. Set the ``upsert`` option to ``true`` to create a new document
if no documents match the filter.

The ``updateOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>`
that resolves to an object. You can use the ``modifiedCount`` field of this
object to determine whether a document was updated. If a document is
updated, the ``modifiedCount`` field contains a value of ``1``. If no
documents are updated, the field contains a value of ``0``.

``updateOne()`` throws an exception if an error occurs
during execution. For example, an exception is thrown if you specify
the immutable field ``_id``. A ``duplicate key error`` exception
is thrown if your update document contains a value that violates
unique index rules.

.. note::

  If your application requires the document after updating,
  consider using the :node-docs:`collection.findOneAndUpdate()
  <api/Collection.html#findOneAndUpdate>`. method, which has a similar
  interface to ``updateOne()`` but also returns the original or updated
  document.

Example
-------

.. literalinclude:: /code-snippets/usage-examples/updateOne.js
  :language: javascript
  :linenos:

