==================
Replace a Document
==================

.. default-domain:: mongodb

You can replace a single document using the 
:node-api:`collection.replaceOne() <Collection.html#replaceOne>` method. 
``replaceOne()`` accepts a query document and a replacement document. If
the query matches a document in the collection, it replaces the first
match with the replacement document.
All fields and values in the original document are removed with the
exception of the ``_id`` value, which remains the same unless you
explicitly specify a new value for ``_id`` in the replacement document.

You can specify additional options, such as ``upsert``, using the
optional ``options`` parameter. Configuring the ``upsert`` field to
``true`` in the options object causes the operation to insert a new
document if no document matches the query.

The ``replaceOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>`
that resolves to an :node-docs:`updateWriteOpResult
<api/Collection.html#~updateWriteOpResult>`
object. You can use the ``modifiedCount`` field of this
object to determine whether a document was modified. When you specify the
upsert option, the ``upsertedCount`` field indicates the number of newly 
inserted documents. Use the ``upsertedId._id`` field if you need a 
unique identifier for an upserted document.

The ``replaceOne()`` method throws an exception if an error occurs
during execution. For example, if you specify a value that violates a
unique index rule, ``replaceOne()`` throws a ``duplicate key error``.

.. note::

  If your application requires the document after updating,
  use the :node-api:`collection.findOneAndReplace()
  <Collection.html#findOneAndReplace>`
  method which has a similar interface to ``replaceOne()``.
  You can configure ``findOneAndReplace()`` to return either the
  original matched document or the replacement document.

Example
-------

.. literalinclude:: /code-snippets/usage-examples/replaceOne.js
  :language: javascript
  :linenos:
